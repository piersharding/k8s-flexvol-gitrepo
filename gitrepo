#!/bin/bash

# flexVolume Driver for mounting an image as a volume
# image is pulled, exported, and unpacked onto the local filesystem
# only a single copy is held on the filesystem and this is then available
# for multi-mount (ReadWriteMany)

# Copyright 2020 Piers Harding.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use:
#
# Create a place holder StorageClass
# ---
#   apiVersion: storage.k8s.io/v1
#   kind: StorageClass
#   metadata:
#     name: gitrepo
#   provisioner: piersharding/gitrepo
#   parameters:
#     description: "Volume from GitRepo FlexVolume driver"
#
#  Create a PersistentVolume with the key options: image and hostTarget (optional)
#  repo: must be a valid gitRepo that will be pulled and used to seed the volume
#  sshKey:  optional base64 encoded ssh private key to be used for git ssh
#  hostTarget: optional named directory that will be used as the storage location
# for the unpacked image
# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: pv-flex-gitrepo-0001
# spec:
#   capacity:
#     storage: 1Gi
#   accessModes:
#     - ReadWriteMany
#   flexVolume:
#     driver: "piersharding/gitrepo"
#     options:
#       repo: "https://github.com/piersharding/k8s-flexvol-gitrepo.git"
#       sshKey: asdasdfasdfsa..= # option ssh private key to use
#       hostTarget: /data/images
#   storageClassName: gitrepo

# setup environment
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
if [ -f "${SCRIPT_DIR}/../../gitrepo_env.rc" ]; then
        source ${SCRIPT_DIR}/../../gitrepo_env.rc
fi
DRIVER_LOCATION=${DRIVER_LOCATION:-/usr/libexec/kubernetes/kubelet-plugins/volume/}
GIT_EXE=${GIT_EXE:-${DRIVER_LOCATION}/git}
JQ_EXE=${JQ_EXE:-${DRIVER_LOCATION}/jq}
SSH_EXE=${SSH_EXE:-/usr/bin/ssh}
BASE64_EXE=${BASE64_EXE:-/usr/bin/base64}
HOST_TARGET=${HOST_TARGET:-/var/tmp/images}
MOUNTINFO=/proc/self/mountinfo
TEMP_DIR=/var/tmp
DEBUG=${DEBUG:-false}


# Notes:
usage() {
    err "Invalid usage. Usage: "
    err "\t$0 init"
    err "\t$0 mount <mount dir> <json params>"
    err "\t$0 unmount <mount dir>"
    exit 1
}

FLEX_GITREPO_LOG=${FLEX_GITREPO_LOG:-"/var/tmp/flex-gitrepo.log"}

err() {
    logger "[gitrepo][$$] err: $*"
    echo -ne $* 1>&2
}

log() {
    debug "[gitrepo] output: $*"
    echo -ne $* >&1
}

debug() {
    if [ "${DEBUG}" == "true" ]; then
        logger "[gitrepo][$$] debug: $*"
        echo "$(date)[$$] $*" >> "${FLEX_GITREPO_LOG}"
    fi
}

failandexit() {
    log "{\"status\":\"Failure\",\"message\":\"$*\"}"
    RC=1
    exit 1
}

domount() {
    debug "##################################  domount $@"
    MNTPATH=$1
    JSON=$2

    REPO=$(echo ${JSON} | ${JQ_EXE} -r '.repo | select (.!=null)')
    SSH_KEY=$(echo ${JSON} | ${JQ_EXE} -r '."kubernetes.io/secret/sshKey" | select (.!=null)')
    TARGET=$(echo ${JSON} | ${JQ_EXE} -r '.hostTarget | select (.!=null)')
    READ_ONLY=$(echo ${JSON} | ${JQ_EXE} -r '."kubernetes.io/readwrite" | select (.!=null)')
    POD_UID=$(echo ${JSON} | ${JQ_EXE} -r '.["kubernetes.io/pod.uid"]')
    HOST_TARGET=${TARGET:-${HOST_TARGET}}
    REPO_DIR=$(echo "${REPO}" | sed 's/[^0-9A-Za-z_.]/_/g')
    HOST_TARGET_DIR="${HOST_TARGET}/${REPO_DIR}"
    REPO_MNT_DIR=${HOST_TARGET_DIR}/mnt
    STATE_DIR=${REPO_MNT_DIR}/.gitrepo_state

    debug "domount: MNTPATH='${MNTPATH}' MOUNT_STATE_DIR='${STATE_DIR}' JSON='${JSON}'"
    debug "domount params:  TARGET=\"${TARGET}\"  HOST_TARGET=\"${HOST_TARGET}\" REPO=\"${REPO}\" REPO_DIR=\"${REPO_DIR}\" HOST_TARGET_DIR=\"${HOST_TARGET_DIR}\" TEMP_REPO=\"${TEMP_REPO}\" 		REPO_MNT_DIR=\"${REPO_MNT_DIR}\"  READ_ONLY=\"${READ_ONLY}\" "

    # lock early and long
    # store state in IMAGE directory: from/to/image
    LOCKFILE="${TEMP_DIR}/${REPO_DIR}.lock"
    TIMEOUT=600  # 10 minutes - sometimes it takes a long time to download images ...
    debug "mount: LOCKFILE=${LOCKFILE}"

    ( flock -w ${TIMEOUT} -x 9 || failandexit "mount: [${MNTPATH}] failed to update state [exlock $LOCKFILE]";   checkandmount ) 9>${LOCKFILE}
    exit ${RC}
}

# do the mounting and recording of the image
# called in the context of flock
checkandmount () {

    RC=0

    # qualify repo name
    # match: localhost:5000/repo.git
    # match: github.com/user/repo.git
    echo "${REPO}" | grep -E '\w+\.\w+.*\/.*\.git|\w+\:[0-9]{2,4}\/.*\.git' >/dev/null 2>&1
    RC=$?
    if [[ ! "${RC}" == "0" ]]; then
        log "{ \"status\": \"Failure\", \"message\": \"Failed to validate GitRepo name '${REPO}' for ${MNTPATH}\"}"
        RC=1
        exit 1
    fi
    debug "mount: GitRepo: ${REPO}"
    debug "mount: checking for first mount"
    if [ ! -d "${STATE_DIR}" ] || [ -d "${HOST_TARGET_DIR}/deleted" ]; then
        debug "mount: THIS IS A first mount"
        mkdir -p "${HOST_TARGET_DIR}" >/dev/null 2>&1
        # pull
        # deploy keys: https://gist.github.com/zhujunsan/a0becf82ade50ed06115
        # ssh keys: https://superuser.com/questions/232373/how-to-tell-git-which-private-key-to-use
        # GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
        # gitlab: https://gitlab-ci-token:${CI_XXX_TOKEN}@gitlab.example.com/group/repo.git
        GIT_SSH_COMMAND="${SSH_EXE}"
        if [ -n "${SSH_KEY}" ]; then
            echo "${SSH_KEY}" | ${BASE64_EXE} -d > ${HOST_TARGET_DIR}/id_rsa
            chmod 600 ${HOST_TARGET_DIR}/id_rsa
            GIT_SSH_COMMAND="${SSH_EXE} -i ${HOST_TARGET_DIR}/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
        fi
        export GIT_SSH_COMMAND
        debug "mount/pull: GIT_SSH_COMMAND=\"${GIT_SSH_COMMAND}\""
        debug "mount/pull: ${GIT_EXE}  clone --single-branch \"${REPO}\" \"${REPO_MNT_DIR}\""
        RES=$(${GIT_EXE} clone --single-branch "${REPO}" "${REPO_MNT_DIR}" 2>&1)
        RC=$?
        if [ ${RC} -ne 0 ]; then
            debug "pull: ${RES}"
            rm -rf "${HOST_TARGET_DIR}" >/dev/null 2>&1
            log "{ \"status\": \"Failure\", \"message\": \"Failed to pull GitRepo ${REPO} for ${MNTPATH} RES: ${RES}\"}"
            RC=1
            exit 1
        fi
        # setup the state directory
        mkdir -p "${STATE_DIR}" "${REPO_MNT_DIR}" >/dev/null 2>&1
        touch "${STATE_DIR}/DO_NOT_TOUCH_OR_IT_WILL_BREAK" >/dev/null 2>&1
        # purge the .git dir
        rm -rf "${REPO_MNT_DIR}/.git" >/dev/null 2>&1
    else
        debug "mount: THIS IS NOT A first mount for ${REPO}"
    fi

    # bind mount to unpacked image
    mkdir -p ${MNTPATH} &> /dev/null
    RES=$(mount --bind "${REPO_MNT_DIR}" "${MNTPATH}" 2>&1)
    if [ $? -ne 0 ]; then
        debug "mount bind [${REPO_MNT_DIR} to ${MNTPATH}]: ${RES}"
        rm -rf "${HOST_TARGET_DIR}" >/dev/null 2>&1
        log "{ \"status\": \"Failure\", \"message\": \"Failed to mount ${REPO_MNT_DIR} at ${MNTPATH}\"}"
        RC=1
        exit 1
    fi

	# remount ro if this should be read-only
	if [ "${READ_ONLY}" != "rw" ]; then
        debug "mounting READ ONLY!"
		RES=$(mount -o remount,bind,ro "${REPO_MNT_DIR}" "${MNTPATH}" 2>&1)
		if [ $? -ne 0 ]; then
            debug "remount bind ro [${REPO_MNT_DIR} to ${MNTPATH}]: ${RES}"
            rm -rf "${HOST_TARGET_DIR}" >/dev/null 2>&1
			log "{ \"status\": \"Failure\", \"message\": \"Failed to remount ro ${REPO_MNT_DIR} at ${MNTPATH}\"}"
            RC=1
			exit 1
		fi
	fi

    echo "${REPO_MNT_DIR}" > ${STATE_DIR}/from
    echo "${MNTPATH}" >> ${STATE_DIR}/to
    echo "${REPO_DIR}" > ${STATE_DIR}/repo

    log "{\"status\":\"Success\"}"
    RC=0
    exit 0
}

unmount() {
    debug "############  unmount $@"
    MNTPATH=$1
    RC=0

    SOURCE_MNT_DIR=$(grep " ${MNTPATH} " ${MOUNTINFO} | awk '{print $4}' | head -1)
    RES=$(grep " ${MNTPATH} " ${MOUNTINFO} 2>&1)
    RC=$?
    if [[ ! "${RC}" == "0" ]]; then
    # prefix with docker registry if required
      debug "dounmount: could not find mount for ${MNTPATH}: ${RES}"
        log "{\"status\":\"Success\", \"message\": \" BUT could not find mount for ${MNTPATH}\"}"
        exit 0
    fi
    debug "dounmount: SOURCE_MNT_DIR='${SOURCE_MNT_DIR}'"

    # unmount and remove state from REPO directory: from/to/repo
    LOCKFILE="${TEMP_DIR}/${REPO_DIR}.lock"
    TIMEOUT=180 # 3 minutes - unmount could take a while if a lot of them are queued up
    debug "unmount: LOCKFILE=${LOCKFILE}"

    # hold lock and process unmount
    ( flock -w ${TIMEOUT} -x 9 || failandexit "unmount: [${MNTPATH}] failed to update state [exlock $LOCKFILE]";   dounmount ) 9>${LOCKFILE}
    exit ${RC}
}

# do the actual unmount and record change to state
# called in the context of flock
dounmount () {

    RC=0
    STATE_DIR=${SOURCE_MNT_DIR}/.gitrepo_state
    mkdir -p ${STATE_DIR}

    # show where mounted
    for MNT in $(grep " ${SOURCE_MNT_DIR} " ${MOUNTINFO} | awk '{print $5}')
    do
        debug "dounmount: [${SOURCE_MNT_DIR}] still mounted at MNT=${MNT}"
    done

    # do the actual unmount
    umount ${MNTPATH} >/dev/null 2>&1

    # remove MNTPATH from "to" state
    grep -v "${MNTPATH}" ${STATE_DIR}/to > ${STATE_DIR}/to.tmp
    mv ${STATE_DIR}/to.tmp ${STATE_DIR}/to

    # prune dead mount points
    for MNT in `cat ${STATE_DIR}/to`
    do
        RES=$(mountpoint "${MNT}" 2>&1)
        RC=$?
        if [[ ! "${RC}" == "0" ]]; then
        debug "umount: ${MNT} is not a mountpoint - PURGING!!!!"
            grep -v "${MNT}" ${STATE_DIR}/to > ${STATE_DIR}/to.tmp
            mv ${STATE_DIR}/to.tmp ${STATE_DIR}/to
        fi
    done

    # count mounts
    NO_MOUNTS=`cat ${STATE_DIR}/to | wc -l`
    debug "umount: NO_MOUNTS='${NO_MOUNTS}' for ${SOURCE_MNT_DIR}"
    if [ "${NO_MOUNTS}" -eq "0"  ]; then
        debug "umount: NO_MOUNTS='${NO_MOUNTS}' says time to purge ${SOURCE_MNT_DIR}"
        HOST_TARGET_DIR=$(echo "${SOURCE_MNT_DIR}" | sed -e 's/\/mnt$//')
        if [ -d "${HOST_TARGET_DIR}/mnt" ] && [ "${#HOST_TARGET_DIR}" -gt "10"  ]; then
            rm -rf "${HOST_TARGET_DIR}" "${LOCKFILE}"
        else
            log "{\"status\":\"Failure\",\"message\":\"unmount: [${REPO_DIR}] invalid\"}"
            RC=1
            exit 1
        fi
    fi

    log "{\"status\":\"Success\"}"
    exit 0
}

op=$1

debug "[gitrepo] $op:[parameters] - $*"

if [ "$op" = "init" ]; then
    debug "init $@"
    log "{\"status\":\"Success\",\"capabilities\":{\"attach\":false}}"
    exit 0
fi

shift

case "$op" in
    mount)
        domount $*
        ;;
    unmount)
        unmount $*
        ;;
    *)
        log "{\"status\":\"Not supported\"}"
        exit 0
esac

exit 1
